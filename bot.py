import os
import asyncio
from datetime import datetime
from telethon import TelegramClient, events, Button
from telethon.tl.functions.channels import GetFullChannelRequest, JoinChannelRequest
from telethon.tl.types import Channel, ChatAdminRights
from telethon.errors import ChannelPrivateError, ChatAdminRequiredError
from dotenv import load_dotenv
from database import Database
from sentiment_analyzer import SentimentAnalyzer

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Telegram
api_id = os.getenv('API_ID')
api_hash = os.getenv('API_HASH')
bot_token = os.getenv('BOT_TOKEN')
webhook_url = os.getenv('WEBHOOK_URL', 'http://localhost:5000')

print(f"API_ID: {api_id}")
print(f"API_HASH: {api_hash}")
print(f"BOT_TOKEN: {bot_token}")
print(f"WEBHOOK_URL: {webhook_url}")

if not all([api_id, api_hash, bot_token]):
    print("–û—à–∏–±–∫–∞: –ù–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
    exit(1)

client = TelegramClient('bot_session', api_id, api_hash)
db = Database()
sentiment_analyzer = SentimentAnalyzer()

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
main_keyboard = [
    [Button.inline("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", b"monitor"),
     Button.inline("üìù –ù–æ–≤—ã–π –ø–æ—Å—Ç", b"new_post")],
    [Button.inline("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", b"stats"),
     Button.inline("üòä –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π", b"analyze")],
    [Button.inline("üîó –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Å—ã–ª–æ–∫", b"link_stats")],
    [Button.inline("üì¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏", b"channels")],
    [Button.inline("‚ùì –ü–æ–º–æ—â—å", b"help")]
]

@client.on(events.NewMessage(pattern='/start'))
async def start_handler(event):
    print(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç {event.sender_id}")
    welcome_text = """
üåü *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä!* üåü

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –≤ Telegram:
‚Ä¢ üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≥—Ä—É–ø–ø
‚Ä¢ üìù –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤ —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π
‚Ä¢ üìà –°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
‚Ä¢ üòä –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏
‚Ä¢ üîó –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –ø–æ —Å—Å—ã–ª–∫–∞–º

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ üëá
    """
    await event.respond(welcome_text, buttons=main_keyboard, parse_mode='markdown')

@client.on(events.CallbackQuery(data=b"help"))
async def help_callback(event):
    help_text = """
üìö *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*

/monitor <group_id> - –ù–∞—á–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≥—Ä—É–ø–ø—ã
/post <text> - –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å
/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
/analyze - –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
/link_stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –ø–æ —Å—Å—ã–ª–∫–∞–º

*–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –ø–æ —Å—Å—ã–ª–∫–∞–º
    """
    await event.respond(help_text, parse_mode='markdown', buttons=main_keyboard)

@client.on(events.CallbackQuery(data=b"link_stats"))
async def link_stats_callback(event):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç
        last_post = db.session.query(Post).order_by(Post.id.desc()).first()
        if last_post:
            stats = db.get_link_statistics(last_post.id)
            stats_text = "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –ø–æ —Å—Å—ã–ª–∫–∞–º:*\n\n"
            for link in stats:
                stats_text += f"üîó {link['original_url']}\n"
                stats_text += f"üë• –í—Å–µ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤: {link['clicks']}\n"
                stats_text += f"üë§ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π: {link['unique_ips']}\n"
                stats_text += f"üåê –ò—Å—Ç–æ—á–Ω–∏–∫–∏: {', '.join(set(link['referrers']))}\n\n"
            await event.respond(stats_text, parse_mode='markdown', buttons=main_keyboard)
        else:
            await event.respond("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Å—Å—ã–ª–∫–∞–º", buttons=main_keyboard)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å—Å—ã–ª–æ–∫: {e}")
        await event.respond("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", buttons=main_keyboard)

@client.on(events.CallbackQuery(data=b"monitor"))
async def monitor_callback(event):
    await event.respond("–í–≤–µ–¥–∏—Ç–µ ID –≥—Ä—É–ø–ø—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n/monitor group_id", buttons=main_keyboard)

@client.on(events.CallbackQuery(data=b"new_post"))
async def new_post_callback(event):
    await event.respond("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n/post –≤–∞—à_—Ç–µ–∫—Å—Ç", buttons=main_keyboard)

@client.on(events.CallbackQuery(data=b"stats"))
async def stats_callback(event):
    stats = db.get_statistics()
    await event.respond(f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n{stats}", parse_mode='markdown', buttons=main_keyboard)

@client.on(events.CallbackQuery(data=b"analyze"))
async def analyze_callback(event):
    comments = db.get_recent_comments()
    analysis = sentiment_analyzer.analyze_batch(comments)
    await event.respond(f"üòä *–ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π:*\n{analysis}", parse_mode='markdown', buttons=main_keyboard)

async def monitor_group(group_id):
    while True:
        try:
            channel = await client.get_entity(group_id)
            full_channel = await client(GetFullChannelRequest(channel=channel))
            members_count = full_channel.full_chat.participants_count
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
            db.save_members_count(group_id, members_count, datetime.now())
            print(f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä—É–ø–ø—ã {group_id}: {members_count} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
            
            await asyncio.sleep(300)  # –ü–∞—É–∑–∞ 5 –º–∏–Ω—É—Ç
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –≥—Ä—É–ø–ø—ã: {e}")
            await asyncio.sleep(60)

@client.on(events.NewMessage(pattern='/monitor'))
async def monitor_handler(event):
    print(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /monitor –æ—Ç {event.sender_id}")
    try:
        group_id = event.text.split()[1]
        await event.respond(f"üîÑ –ù–∞—á–∏–Ω–∞—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≥—Ä—É–ø–ø—ã {group_id}", buttons=main_keyboard)
        asyncio.create_task(monitor_group(group_id))
    except IndexError:
        await event.respond("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –≥—Ä—É–ø–ø—ã", buttons=main_keyboard)

@client.on(events.NewMessage(pattern='/post'))
async def post_handler(event):
    print(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /post –æ—Ç {event.sender_id}")
    try:
        text = event.text.split(maxsplit=1)[1]
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –≤ —Ç–µ–∫—Å—Ç–µ
        links = [word for word in text.split() if word.startswith('http')]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç –≤ –ë–î
        post_id = db.save_post(text, datetime.now())
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –Ω–∞–π–¥–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏
        for link in links:
            short_id = db.create_short_link(post_id, link)
            short_url = f"{webhook_url}/track/{short_id}"
            text = text.replace(link, short_url)
        
        await event.respond(f"‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!\nID: {post_id}\n\n{text}", buttons=main_keyboard)
    except IndexError:
        await event.respond("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞", buttons=main_keyboard)

@client.on(events.NewMessage(pattern='/stats'))
async def stats_handler(event):
    print(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /stats –æ—Ç {event.sender_id}")
    stats = db.get_statistics()
    await event.respond(f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n{stats}", parse_mode='markdown', buttons=main_keyboard)

@client.on(events.NewMessage(pattern='/analyze'))
async def analyze_handler(event):
    print(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /analyze –æ—Ç {event.sender_id}")
    comments = db.get_recent_comments()
    analysis = sentiment_analyzer.analyze_batch(comments)
    await event.respond(f"üòä *–ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π:*\n{analysis}", parse_mode='markdown', buttons=main_keyboard)

@client.on(events.CallbackQuery(data=b"channels"))
async def channels_callback(event):
    channels = db.get_active_channels()
    if not channels:
        await event.respond("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤", buttons=main_keyboard)
        return

    text = "üì¢ *–í–∞—à–∏ –∫–∞–Ω–∞–ª—ã:*\n\n"
    for channel in channels:
        text += f"‚Ä¢ {channel.title} (@{channel.username})\n"
    
    text += "\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    buttons = [
        [Button.inline("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", b"add_channel")],
        [Button.inline("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–∞", b"channel_stats")],
        [Button.inline("üìù –ü–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª", b"post_to_channel")],
        [Button.inline("üîô –ù–∞–∑–∞–¥", b"back_to_main")]
    ]
    await event.respond(text, parse_mode='markdown', buttons=buttons)

@client.on(events.CallbackQuery(data=b"add_channel"))
async def add_channel_callback(event):
    await event.respond(
        "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞:\n"
        "1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ –∫–∞–Ω–∞–ª\n"
        "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "/add_channel @username_–∫–∞–Ω–∞–ª–∞",
        buttons=main_keyboard
    )

@client.on(events.NewMessage(pattern='/add_channel'))
async def add_channel_handler(event):
    try:
        channel_username = event.text.split()[1].strip('@')
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
        channel = await client.get_entity(channel_username)
        
        if not isinstance(channel, Channel):
            await event.respond("‚ùå –≠—Ç–æ –Ω–µ –∫–∞–Ω–∞–ª!", buttons=main_keyboard)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞
        try:
            await client.get_permissions(channel)
        except (ChannelPrivateError, ChatAdminRequiredError):
            await event.respond(
                "‚ùå –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞!\n"
                "–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                buttons=main_keyboard
            )
            return

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        db.add_channel(
            channel_id=str(channel.id),
            title=channel.title,
            username=channel_username
        )

        await event.respond(
            f"‚úÖ –ö–∞–Ω–∞–ª {channel.title} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
            buttons=main_keyboard
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞: {e}")
        await event.respond(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏.",
            buttons=main_keyboard
        )

@client.on(events.CallbackQuery(data=b"channel_stats"))
async def channel_stats_callback(event):
    channels = db.get_active_channels()
    if not channels:
        await event.respond("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤", buttons=main_keyboard)
        return

    buttons = []
    for channel in channels:
        buttons.append([Button.inline(f"üìä {channel.title}", f"stats_{channel.channel_id}")])
    buttons.append([Button.inline("üîô –ù–∞–∑–∞–¥", b"channels")])
    
    await event.respond("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", buttons=buttons)

@client.on(events.CallbackQuery(pattern=b"stats_"))
async def show_channel_stats(event):
    channel_id = event.data.decode().split('_')[1]
    stats = db.get_channel_statistics(channel_id)
    
    if not stats:
        await event.respond("‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", buttons=main_keyboard)
        return

    # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    text = f"""
üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–∞ {stats['channel_title']} (@{stats['username']})*
üìÖ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {stats['period_days']} –¥–Ω–µ–π

üìù *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
‚Ä¢ –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {stats['total_posts']}
‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {stats['total_views']}
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {int(stats['average_views'])}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç: {stats['last_post_date'].strftime('%d.%m.%Y %H:%M') if stats['last_post_date'] else '–ù–µ—Ç –ø–æ—Å—Ç–æ–≤'}

‚è∞ *–õ—É—á—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ—Å—Ç–∏–Ω–≥–∞:* {stats['best_posting_hour']}:00

üìà *–¢–æ–ø –ø–æ—Å—Ç–æ–≤:*
"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø –ø–æ—Å—Ç–æ–≤
    for i, post in enumerate(stats['top_posts'], 1):
        text += f"\n{i}. {post['text']}\n"
        text += f"   üëÅ {post['views']} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ ‚Ä¢ {post['date'].strftime('%d.%m.%Y')}\n"

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–Ω—è–º
    text += "\nüìÖ *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º:*\n"
    for day, day_stats in sorted(stats['daily_stats'].items(), reverse=True)[:7]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        text += f"‚Ä¢ {day.strftime('%d.%m')}: {day_stats['posts']} –ø–æ—Å—Ç–æ–≤, {day_stats['views']} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    buttons = [
        [Button.inline("üîó –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Å—ã–ª–æ–∫", f"link_stats_{channel_id}")],
        [Button.inline("üìä –ó–∞ 7 –¥–Ω–µ–π", f"stats_7_{channel_id}"),
         Button.inline("üìä –ó–∞ 30 –¥–Ω–µ–π", f"stats_30_{channel_id}")],
        [Button.inline("üîô –ù–∞–∑–∞–¥", b"channels")]
    ]
    
    await event.respond(text, parse_mode='markdown', buttons=buttons)

@client.on(events.CallbackQuery(pattern=b"stats_\d+_"))
async def show_channel_stats_period(event):
    try:
        period, channel_id = event.data.decode().split('_')[1:]
        stats = db.get_channel_statistics(channel_id, days=int(period))
        await show_channel_stats(event)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await event.respond("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", buttons=main_keyboard)

@client.on(events.CallbackQuery(pattern=b"link_stats_"))
async def show_channel_link_stats(event):
    channel_id = event.data.decode().split('_')[2]
    stats = db.get_channel_link_statistics(channel_id)
    
    if not stats:
        await event.respond("‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Å—ã–ª–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", buttons=main_keyboard)
        return

    text = f"""
üîó *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Å—ã–ª–æ–∫ –∫–∞–Ω–∞–ª–∞ {stats['channel_title']}*

üìä *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
‚Ä¢ –í—Å–µ–≥–æ —Å—Å—ã–ª–æ–∫: {stats['total_links']}
‚Ä¢ –í—Å–µ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤: {stats['total_clicks']}

üìà *–¢–æ–ø —Å—Å—ã–ª–æ–∫:*
"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø —Å—Å—ã–ª–æ–∫
    for i, link in enumerate(stats['top_links'], 1):
        text += f"\n{i}. {link['original_url']}\n"
        text += f"   üë• {link['clicks']} –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ ‚Ä¢ {link['unique_ips']} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π\n"
        text += f"   üìù –ü–æ—Å—Ç: {link['post_text']}\n"
        text += f"   üìÖ {link['post_date'].strftime('%d.%m.%Y')}\n"

    buttons = [
        [Button.inline("üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", f"stats_{channel_id}")],
        [Button.inline("üîô –ù–∞–∑–∞–¥", b"channels")]
    ]
    
    await event.respond(text, parse_mode='markdown', buttons=buttons)

@client.on(events.CallbackQuery(data=b"post_to_channel"))
async def post_to_channel_callback(event):
    channels = db.get_active_channels()
    if not channels:
        await event.respond("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤", buttons=main_keyboard)
        return

    buttons = []
    for channel in channels:
        buttons.append([Button.inline(f"üìù {channel.title}", f"post_{channel.channel_id}")])
    buttons.append([Button.inline("üîô –ù–∞–∑–∞–¥", b"channels")])
    
    await event.respond("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:", buttons=buttons)

@client.on(events.CallbackQuery(pattern=b"post_"))
async def prepare_channel_post(event):
    channel_id = event.data.decode().split('_')[1]
    await event.respond(
        f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        f"/post_to {channel_id} –≤–∞—à_—Ç–µ–∫—Å—Ç",
        buttons=main_keyboard
    )

@client.on(events.NewMessage(pattern='/post_to'))
async def post_to_channel_handler(event):
    try:
        _, channel_id, *text_parts = event.text.split(maxsplit=2)
        if not text_parts:
            await event.respond("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞", buttons=main_keyboard)
            return

        text = text_parts[0]
        channel = db.get_channel(channel_id)
        if not channel:
            await event.respond("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", buttons=main_keyboard)
            return

        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –≤ —Ç–µ–∫—Å—Ç–µ
        links = [word for word in text.split() if word.startswith('http')]
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –Ω–∞–π–¥–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏
        for link in links:
            short_id = db.create_short_link(None, link)
            short_url = f"{webhook_url}/track/{short_id}"
            text = text.replace(link, short_url)

        # –ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª
        message = await client.send_message(channel.username, text)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        post_id = db.save_post(
            text=text,
            timestamp=datetime.now(),
            channel_id=channel.id,
            message_id=message.id
        )

        await event.respond(
            f"‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª {channel.title}!",
            buttons=main_keyboard
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª: {e}")
        await event.respond(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞",
            buttons=main_keyboard
        )

@client.on(events.CallbackQuery(data=b"back_to_main"))
async def back_to_main_callback(event):
    await event.respond("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", buttons=main_keyboard)

async def main():
    print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    await client.start(bot_token=bot_token)
    print("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    await client.run_until_disconnected()

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}") 